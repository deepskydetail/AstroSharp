abort                   Signal an error, warning, or message
are_na                  Test for missing values
arg_match               Match an argument to a character vector
as_data_mask            Create a data mask
as_environment          Coerce to an environment
as_function             Convert to function or closure
as_quosure              Coerce object to quosure
as_utf8_character       Coerce to a character vector and attempt
                        encoding conversion
bare-type-predicates    Bare type predicates
box                     Box a value
call2                   Create a call
call_args               Extract arguments from a call
call_fn                 Extract function from a call
call_inspect            Inspect a call
call_modify             Modify the arguments of a call
call_name               Extract function name of a call
call_standardise        Standardise a call
caller_env              Get the environment of the caller frame
catch_cnd               Catch a condition
cnd                     Create a condition object
cnd_signal              Signal a condition
dots_n                  How many arguments are currently forwarded in
                        dots?
dots_values             Evaluate dots with preliminary splicing
empty_env               Get the empty environment
env                     Create a new environment
env_bind                Bind symbols to objects in an environment
env_bury                Mask bindings by defining symbols deeper in a
                        scope
env_clone               Clone an environment
env_depth               Depth of an environment chain
env_get                 Get an object in an environment
env_has                 Does an environment have or see bindings?
env_inherits            Does environment inherit from another
                        environment?
env_names               Names of symbols bound in an environment
env_parent              Get parent environments
env_unbind              Remove bindings from an environment
eval_bare               Evaluate an expression in an environment
eval_tidy               Evaluate an expression with quosures and
                        pronoun support
exiting                 Create an exiting or in place handler
expr_interp             Process unquote operators in a captured
                        expression
expr_label              Turn an expression to a label
expr_print              Print an expression
exprs_auto_name         Ensure that list of expressions are all named
f_rhs                   Get or set formula components
f_text                  Turn RHS of formula into a string or label
flatten                 Flatten or squash a list of lists into a
                        simpler vector
fn_body                 Get or set function body
fn_env                  Return the closure environment of a function
fn_fmls                 Extract arguments from a function
get_env                 Get or set the environment of an object
has_length              How long is an object?
has_name                Does an object have an element with this name?
inherits_any            Does an object inherit from a set of classes?
invoke                  Invoke a function with a list of arguments
is_call                 Is object a call?
is_callable             Is an object callable?
is_condition            Is object a condition?
is_copyable             Is an object copyable?
is_empty                Is object an empty vector or NULL?
is_env                  Is object an environment?
is_expression           Is an object an expression?
is_formula              Is object a formula?
is_frame                Is object a frame?
is_function             Is object a function?
is_installed            Is a package installed in the library?
is_integerish           Is a vector integer-like?
is_named                Is object named?
is_namespace            Is an object a namespace environment?
is_reference            Is an object referencing another?
is_stack                Is object a stack?
is_symbol               Is object a symbol?
is_true                 Is object identical to TRUE or FALSE?
lang_head               Return the head or tail of a call
lifecycle               Life cycle of the rlang package
missing                 Missing values
missing_arg             Generate or handle a missing argument
names2                  Get names of a vector
new-vector              Create vectors matching a given length
new-vector-along        Create vectors matching the length of a given
                        vector
new_formula             Create a formula
new_function            Create a function
op-get-attr             Infix attribute accessor
op-na-default           Replace missing values
op-null-default         Default value for 'NULL'
parse_quosures          Parse R code
prim_name               Name of a primitive function
quasiquotation          Quasiquotation of an expression
quo_label               Format quosures for printing or labelling
quo_squash              Squash a quosure
quosure                 Quosure getters, setters and testers
quotation               Quotation
restarting              Create a restarting handler
return_from             Jump to or from a frame
rst_abort               Jump to the abort restart
rst_list                Restarts utilities
rst_muffle              Jump to a muffling restart
scalar-type-predicates
                        Scalar type predicates
scoped_bindings         Temporarily change bindings of an environment
scoped_options          Change global options
seq2                    Increasing sequence of integers in an interval
set_expr                Set and get an expression
set_names               Set names of a vector
string                  Create a string
sym                     Create a symbol or list of symbols
tidy-dots               Collect dots tidily
tidyeval-data           Data pronoun for tidy evaluation
type-predicates         Type predicates
vector-coercion         Coerce an object to a base type
vector-construction     Create vectors
with_env                Evaluate an expression within a given
                        environment
with_handlers           Establish handlers on the stack
with_restarts           Establish a restart point on the stack
