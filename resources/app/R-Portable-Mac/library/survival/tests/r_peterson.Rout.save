
R version 2.14.0 Under development (unstable) (2011-04-10 r55401)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> options(na.action=na.exclude) # preserve missings
> options(contrasts=c('contr.treatment', 'contr.poly')) #ensure constrast type
> library(survival)
Loading required package: splines
> 
> #
> # Data courtesy of Bercedis Peterson, Duke University.
> #  v4 of survreg fails due to 2 groups that have only 1 subject; the coef
> #  for them easily gets out of hand.  In fact, this data set is my toughest
> #  test of the minimizer.
> #
> # A shrinkage model for this coefficient is therefore interesting
> 
> 
> peterson <- data.frame(
+ 		  scan('data.peterson', what=list(grp=0, time=0, status=0)))
Read 19 records
> 
> fitp <- survreg(Surv(time, status) ~ factor(grp), peterson)
> summary(fitp)

Call:
survreg(formula = Surv(time, status) ~ factor(grp), data = peterson)
              Value Std. Error     z        p
(Intercept)   2.291      0.115 19.92 2.93e-88
factor(grp)2  0.786      0.177  4.44 8.79e-06
factor(grp)3  0.728      0.183  3.97 7.09e-05
factor(grp)4 -1.598      0.218 -7.32 2.48e-13
factor(grp)5 -0.500      0.218 -2.29 2.21e-02
factor(grp)6  0.475      0.170  2.79 5.23e-03
Log(scale)   -1.684      0.257 -6.54 6.09e-11

Scale= 0.186 

Weibull distribution
Loglik(model)= -26.7   Loglik(intercept only)= -40.7
	Chisq= 28.18 on 5 degrees of freedom, p= 3.4e-05 
Number of Newton-Raphson Iterations: 9 
n= 19 

> 
> # Now a shrinkage model.  Give the group coefficients
> #  about 1/2 the scale parameter of the original model, i.e., .18.
> #
> ffit <- survreg(Surv(time, status) ~ frailty(grp, theta=.1), peterson)
> ffit
Call:
survreg(formula = Surv(time, status) ~ frailty(grp, theta = 0.1), 
    data = peterson)

                          coef se(coef) se2    Chisq DF   p     
(Intercept)               2.62 0.172    0.0874 232.0 1.00 0.0000
frailty(grp, theta = 0.1)                       10.4 2.15 0.0067

Scale= 0.301 

Iterations: 1 outer, 6 Newton-Raphson
     Variance of random effect= 0.1   I-likelihood = -11.8 
Degrees of freedom for terms= 0.3 2.2 0.7 
Likelihood ratio test=13.8  on 1.1 df, p=0.00027  n= 19 
> 
> #
> # Try 3 degrees of freedom, since there are 6 groups
> #   compare them to the unconstrained ones.  The frailty coefs are
> #   on a "sum to constant" constraint rather than "first coef=0", so
> #   some conversion is neccessary
> #
> ffit3 <- survreg(Surv(time, status) ~ frailty(grp, df=3), peterson)
> print(ffit3)
Call:
survreg(formula = Surv(time, status) ~ frailty(grp, df = 3), 
    data = peterson)

                     coef se(coef) se2    Chisq DF   p      
(Intercept)          2.54 0.187    0.0685 184.1 1.00 0.00000
frailty(grp, df = 3)                       16.7 3.06 0.00088

Scale= 0.227 

Iterations: 6 outer, 32 Newton-Raphson
     Variance of random effect= 0.17   I-likelihood = -10.1 
Degrees of freedom for terms= 0.1 3.1 0.3 
Likelihood ratio test=22.9  on 1.5 df, p=4.58e-06  n= 19 
> 
> temp <- mean(c(0, fitp$coef[-1])) - mean(ffit3$frail)
> temp2 <- c(fitp$coef[1] + temp, c(0,fitp$coef[-1]) - temp)
> xx <- rbind(c(nrow(peterson), table(peterson$grp)),
+ 	    temp2,
+ 	    c(ffit3$coef, ffit3$frail))
> dimnames(xx) <- list(c("N", "factor", "frailty"),
+ 		     c("Intercept", paste("grp", 1:6)))
> signif(xx,3)
        Intercept  grp 1 grp 2 grp 3 grp 4  grp 5 grp 6
N           19.00  3.000 6.000 6.000  1.00  1.000 2.000
factor       2.43 -0.137 0.649 0.591 -1.74 -0.636 0.338
frailty      2.54 -0.255 0.474 0.438 -1.21 -0.554 0.180
> 
> rm(ffit, ffit3, temp, temp2, xx, fitp)
> 
