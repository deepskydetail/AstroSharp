export(ddalpha.train, ddalpha.classify,  
       ddalpha.test, ddalpha.getErrorRateCV, ddalpha.getErrorRatePart,
       ddalphaf.train, ddalphaf.classify, 
       ddalphaf.test, ddalphaf.getErrorRateCV, ddalphaf.getErrorRatePart,
       compclassf.train, compclassf.classify,
       depth., depth.space.,
       depth.zonoid, depth.halfspace, depth.Mahalanobis, depth.projection, depth.spatial, depth.simplicial, depth.simplicialVolume, depth.potential, depth.qhpeeling, depth.L2, depth.betaSkeleton,
       depth.space.zonoid, depth.space.halfspace, depth.space.Mahalanobis, depth.space.projection, depth.space.spatial, depth.space.simplicial, depth.space.simplicialVolume, depth.space.potential,
       is.in.convex, 
       dknn.train, dknn.classify, dknn.classify.trained,
       resetPar, depth.graph, draw.ddplot, depth.contours, depth.contours.ddalpha,
       getdata,
       dataf.geneexp, dataf.growth, dataf.medflies, dataf.tecator,
       dataf.sim.1.CFF07, dataf.sim.2.CFF07,
       plot.functional, lines.functional, points.functional)
export(FKS, shape.fd.analysis, shape.fd.outliers, 
       depthf.,
       depthf.BD, depthf.ABD, depthf.fd1, depthf.fd2,
       depthf.HR, depthf.hM, depthf.hM2, depthf.RP1, depthf.RP2, derivatives.est, 
       L2metric, Cmetric, depth.sample, infimalRank, dataf.population, dataf.population2010,
       dataf2rawfd, rawfd2dataf
       )
useDynLib(ddalpha, .registration = TRUE)
S3method(predict, ddalpha)
S3method(predict, ddalphaf)
S3method(predict, compclassf)
S3method(plot, ddalpha)
S3method(plot, ddalphaf)
S3method(plot, functional)
S3method(lines, functional)
S3method(points, functional)
S3method(print, ddalpha)
S3method(print, ddalphaf)
S3method(summary, ddalpha)
S3method(summary, ddalphaf)
S3method(print, ddalpha.pattern)
S3method(print, ddalpha.alpha)
S3method(print, ddalpha.polynomial)
S3method(print, ddalpha.knnlm)
S3method(print, ddalpha.maxD)
import(stats)
import(utils)
import(graphics)
import(grDevices)
import(MASS)
import(class)
import(robustbase)
import(Rcpp)
import(geometry)

import(sfsmisc)