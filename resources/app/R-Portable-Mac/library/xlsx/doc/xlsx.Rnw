% \VignetteIndexEntry{Read, write, format Excel 2007 (xlsx) files} 
% \VignetteDepends{}
% \VignetteKeywords{spreadsheet, Excel 2007, java}
% \VignettePackage{xlsx}

% setwd('H:/user/R/Adrian/findataweb/temp/xlsx/trunk/inst/doc/')
% Sweave('xlsx.Rnw');system("mypdflatex xlsx")

\documentclass[10pt]{article}
%\documentclass[nofootinbib]{revtex4}

\usepackage{Sweave}
\usepackage{hyperref}
\hypersetup{colorlinks,%
            citecolor=black,%
            linkcolor=blue,%
            urlcolor=blue,%
            }
\newcommand{\Rpackage}[1]{\textit{#1}}
\newcommand{\Rfunction}[1]{\textit{#1}}
\newcommand{\Robject}[1]{\texttt{#1}}
\newcommand{\Rclass}[1]{{\textit{#1}}}
\newcommand{\Rmethod}[1]{{\textit{#1}}}
\newcommand{\Rfunarg}[1]{{\textit{#1}}}
\newcommand{\R}{{\normalfont\textsf{R }}{}}
\newcommand{\classdef}[1]{%
  {\em #1}
}
\newcommand{\code}[1]{{\texttt{#1}}}
\newcommand{\file}[1]{{\texttt{#1}}}

\textwidth       178mm
\oddsidemargin     0in
  \advance\oddsidemargin by -1in
  \advance\oddsidemargin by 19mm
\evensidemargin    0in
  \advance\evensidemargin by -1in
  \advance\evensidemargin by 19mm
\textheight        9.25in     %   9.75in is the max
\topmargin         0in
  \advance\topmargin by 0in  % -0.5in the max you can go
\headheight        0pt
\headsep           0pt
\topskip           0pt


\title{Read, write, format Excel 2007 (xlsx) files}
\author{Adrian A. Dr\u{a}gulescu}
%\email{adrian.dragulescu@gmail.com}
\date{\small{last compiled \today; last modified on 2009-12-28}}


\begin{document}

\maketitle

\begin{abstract}
The \code{xlsx} package provides tools neccessary to interact with 
Excel 2007 files from \R.  The user can read and write xlsx files, and
can control the appearance of the spreadsheet by setting data formats,
fonts, colors, borders.  Set the print area, the zoom control, create 
split and freeze panels, adding headers and footers.  The package uses
a java library from the Apache POI project. 
\end{abstract}
%\pacs{R, Excel 2007, Java, }

\tableofcontents

<<setup, echo=FALSE, results=hide>>=
options(width=72, continue=" ")
require(xlsx)
@ 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Introduction}

The package \code{xlsx} makes possible to interact with Excel
2007 files from \R.  While a power \R user usually does not need to
use Excel or even avoids it altogether, there are cases when being
able to generate Excel output or read Excel files into \R is a must.
One such case is in an office environment when you need to collaborate
with co-workers who use Excel as their primary tool.  Another case is
to use Excel for basic reporting of results.  For moderate data sets,
the formatting capabilities of Excel can prove useful.  A flexible way
to manipulate Excel 2007 xlsx files from \R would then be a nice
addition.

The \code{xlsx} package focuses on Excel 2007 because for Excel 97
there are already several solutions, \code{RODBC}\cite{RODBC},
\code{xlsReadWrite}\cite{xlsReadWrite},
\code{RExcelInstaller}\cite{RExcelInstaller}, etc.  While some of
these packages work with Excel 2007 files too, the contribution of the
\code{xlsx} package is different.

The xlsx Excel 2007 file format is essentially a zipped set of xml
files.  It is possible to interact directly with these files from \R
as shown by the package \code{RExcelXML}\cite{RExcelXML}.  All the
functionality of the \code{xlsx} package can be replicated with
\code{RExcelXML} package or by extending it.  Working directly with
the zipped xml files, and using the xml schema to extract the useful
information into \R gives you ultimate control. 

The approach taken in the \code{xlsx} package is to use a proven,
existing API between Java and Excel 2007 and use the \code{rJava}
\cite{rJava} package to link Java and \R.  The advantage of this
approach is that the code on the R side is very compact, easy to
maintain, and easy to extend even for people with little Java
experience.  All the heavy lifting of parsing XML schemas is being
done in Java.  We also benefit from a mature software project with
many developers, test suites, and users that report issues on the Java
side.  In principle, this should make the maintainance of the
\code{xlsx} package easy.  The Java API used by the \code{xlsx} is one
project of the Apache Software Foundation, called Apache POI and can
be found at \url{http://poi.apache.org/}.

The Apache POI Project's mission is to create and maintain Java APIs
for manipulating various file formats based upon the Office Open XML
standards (OOXML) and Microsoft's OLE 2 Compound Document format
(OLE2).  These include Excel, Word, and PowerPoint documents.  While
the focus of the \code{xlsx} package has been only on Excel files, if
there is interest in the \R community, it can be easily extended for
Word and PowerPoint documents. 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{High level API}
\label{highLevelAPI}

See \code{read.xlsx} for reading the sheet of an xlsx file into a
data.frame.  See \code{write.xlsx} writing a data.frame to an xlsx
file.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Low level API}
\label{lowLevelAPI}

See \code{Workbook} for creating workbooks.  See \code{Worksheet} for
code to manipulate worksheets.  See \code{Cell} for manipulating
cells.  

See \code{OtherEffects} for various spreadsheet effects, for example,
merge cells, auto size columns, create freeze panels, create split
panels, set print area, set the zoom, etc. 

Use \code{PrintSetup} for customizing the settings for printing. 

\subsection{Cell formatting}
\label{cellFormatting}

See \code{CellStyle} for how to format a particular cell. 

Use \code{Font} to set a font. 




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Conclusions}
\label{Conclusions}

By adding a lightweigth \R layer on top of the Apache project Java
interface to Excel 2007 documents, we achieve a multi-platform
solution for interacting with Excel 2007 file formats from \R.  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%\section{Appendix: Methods for xlsx objects}
%\label{appendixMethods}




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{thebibliography}{99}

\bibitem{R} R Development Core Team:
\emph{R: A Language and Environment for Statistical Computing},
R Foundation for Statistical Computing, Vienna, Austria.
ISBN 3-900051-07-0, URL \url{http://www.R-project.org}

\bibitem{RODBC}Brian Ripley and from 1999 to Oct 2002 Michael Lapsley
  (2009). \emph{RODBC: ODBC Database Access}. R package version 1.3-1.
  \url{http://CRAN.R-project.org/package=RODBC}
  
\bibitem{xlsReadWrite} Hans-Peter Suter, Treetron and Switzerland
  (2006).  \emph{xlsReadWrite: Natively read and write Excel files.}
  \url{http://treetron.googlepages.com/}
  
\bibitem{RExcelInstaller} Erich Neuwirth, with contributions by
  Richard Heiberger, Christian Ritter, Jan Karel Pieterse and and
  Jurgen Volkering (2009). \emph{RExcelInstaller: Integration of R and
  Excel, (use R in Excel, read/write XLS files).} R package version
  3.0-18. \url{http://CRAN.R-project.org/package=RExcelInstaller}
  
\bibitem{RExcelXML} Duncan Temple Lang (2009).  \emph{RExcelXML: Read
  and manipulate new-style (Office '07) Excel files.}
  \url{http://www.omegahat.org/RExcelXML/}

\bibitem{rJava}Simon Urbanek (2009). 
  \emph{rJava: Low-level R to Java interface.} R package version 0.8-1.
  \url{http://CRAN.R-project.org/package=rJava}
  
\end{thebibliography}


\end{document}
